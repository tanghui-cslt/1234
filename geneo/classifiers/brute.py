import numpy as np
import dionysus as di
from tqdm import tqdm
from collections import Counter
from scipy.spatial.distance import squareform
from scipy.cluster.hierarchy import dendrogram, linkage
from itertools import combinations
import sys
if sys.platform == "linux":
    import matplotlib
    matplotlib.use("Agg")
import matplotlib.pyplot as plt
import seaborn as sns
sns.set_style("dark")

class Brute:
    """Gives predictions on test images by comparing the persistence diagrams
    computed according to the measuring functions of an observer. A prediction
    is generated by comparing all the possible pairwise distances between the
    objects generated by applying each operator on both the ground truth and
    the test signal set.

    Parameters
    ----------
    observer : <Observer>
        an instance of Observer equipped with a certain set of measuring
        functions
    data : <DataSet>
        an instance of DataSet where data have been preprocessed and/or
        augmented

    """
    def __init__(self, observer, data):
        self.observer = observer
        self.data = data

    def fit(self, hom_deg=1, num_examples=10, threshold=1.5, th_per=75,
            select=True, sample=True):
        """Selects and samples the observer's operators
        """
        self.hom_deg = hom_deg
        self.num_examples = num_examples
        self.threshold = threshold
        self.th_per = th_per
        self.data.select_n_examples_per_class(num_examples=num_examples)
        if select: self.select()
        if sample: self.sample()

    def select(self):
        """Performs operators selection: gather operators that agree on objects
        in the same class
        """
        self.observer.select_filters_on_signal_set(self.data.sampled_imgs,
                                                   hom_deg=self.hom_deg,
                                                   threshold=self.threshold)
        n_sel_ops = len(self.observer.selected_operators)
        print("\n{} operators have been selected".format(n_sel_ops))
        if n_sel_ops == 0:
            raise ValueError("No operator passed selection. Try again!")

    def sample(self):
        """Performs operators sampling: Discards operators that are too similar
        """
        self.observer.sample_operators(self.data.sampled_imgs,
                                       th_per = self.th_per)
        n_samp_ops = len(self.observer.sampled_operators)
        print("\n{} operators have been sampled".format(n_samp_ops))
        if n_samp_ops == 0:
            raise ValueError("No operator passed sampling. Try again!")

    def validate(self, validation_signals, validation_labels, func=np.max):
        """Uses the observer's operators to measure distances between validation
        signals
        """
        distances = []
        pairs = list(combinations(validation_signals,2))
        for p in tqdm(pairs):
            d = self.observer.get_distance_signals(p[0], p[1], func = func)
            distances.append(d)

        self.distance_matrix = squareform(distances)
        self.validation_labels = validation_labels

    def plot_validation_distance_matrix(self):
        """Plots the distance matrix
        """
        D = self.distance_matrix
        self.fig_distance, ax = plt.subplots()
        self.im = ax.imshow(D)
        ax.set_xticks(range(D.shape[0]))
        ax.set_yticks(range(D.shape[0]))
        ax.set_xticklabels(self.validation_labels)
        ax.set_yticklabels(self.validation_labels)
        self.fig_distance.colorbar(self.im)

    def plot_validation_dendrogram(self, method = "single", num_ex_per_class = 0):
        """Plots a dendrogram computed on the distance matrix's linkage
        """
        l = linkage(self.distance_matrix, method)
        self.fig_dendrogram, ax = plt.subplots()
        if num_ex_per_class > 0:
            labels = ['$'+str(l)+'_'+str(i%num_ex_per_class)+'$'
                      for i,l in enumerate(self.validation_labels)]
        dendrogram(l, labels=labels, ax =ax)



if __name__ == "__main__":
    from sklearn.metrics import classification_report
    from geneo.read_data import DataSet
    from geneo.observer import Observer
    from geneo.utils import init_operators
    from geneo.gaussian_ieneo import GIENEO

    # print("Test started")
    # print("initialize data")
    # data = DataSet('mnist', num_samples_from_training = None)
    # print("preprocess")
    # preprocessing_dict = {'bw': True, 'threshold': .66, 'reshape': True,
    #                       'image_target': (256, 256), 'blur': True,
    #                       'kernel_size': (3,3), 'standardize': True}
    # data.preprocess(params_dict = preprocessing_dict)
    # num_examples_per_class = 2
    # data.select_n_examples_per_class(num_examples=num_examples_per_class)
    # print("initialize operators")
    # operators = init_operators(GIENEO,
    #                           number = 10,
    #                           size = 11,
    #                           sigma = .1,
    #                           centers = 5)
    # print("initialize oberver")
    # model = Brute(Observer(operators), data)
    # print("fitting model")
    # model.fit()
    # print("generating predictions")
    # print("generate test from a set of validation examples")
    # num_val_ex = 100
    # test = np.concatenate([model.data.sampled_val_imgs[c][:num_val_ex]
    #                        for c in model.data.sampled_val_imgs], axis = 0)
    # rev_class_map = {data.class_map[k]: k for k in data.class_map}
    # test_labels = np.concatenate([np.ones(num_val_ex) * rev_class_map[c]
    #                for c in model.data.sampled_val_imgs], axis = 0).astype("int")
    # print("validate")
    # model.validate(test, test_labels)
    # model.plot_validation_distance_matrix()
    # model.plot_validation_dendrogram(method = "single")
    # plt.show()
    # # y_pred = model.predict(data.x_test[:100])
    # # print("Accuracy evaluation")
    # # y_true =  data.y_test[:100]
    # # target_names = [str(c) for c in data.classes]
    # # print(classification_report(y_true, y_pred, target_names=target_names))
